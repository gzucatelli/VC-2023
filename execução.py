# -*- coding: utf-8 -*-
"""Execução.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uqG5YgmxfKJiRUU4PLFiINLdZRbIBDRy
"""

from google.colab import drive

drive.mount('/content/gdrive')

!pip install ultralytics

from ultralytics import YOLO
import cv2
import os

model_path = '/content/gdrive/My Drive/TP-VC-2023/ImageSegmentationYOLOv8/runs/segment/train8/weights/last.pt'
image_path = '/content/gdrive/My Drive/TP-VC-2023/Imagens_teste'
output_folder = '/content/gdrive/My Drive/TP-VC-2023/Imagens_teste/resultados'

def list_image_files(image_path, image_extensions=('png', 'jpg', 'jpeg', 'gif', 'bmp')):
    image_files = []
    for file_name in os.listdir(image_path):
        if file_name.lower().endswith(image_extensions):
            file_path = os.path.join(image_path, file_name)
            image_files.append((file_name, file_path))
    return image_files

def predict(image_path, output_folder):
    img = cv2.imread(image_path)
    H, W, _ = img.shape
    model = YOLO(model_path)
    results = model(img)

    if results is not None:
        masks_available = False
        for result in results:
            if result.masks is not None:
                for j, mask in enumerate(result.masks.data):
                    mask = mask.numpy() * 255
                    if mask is not None:
                        masks_available = True
                        mask = cv2.resize(mask, (W, H))
                        # Obter o nome do arquivo sem extensão
                        file_name = os.path.splitext(os.path.basename(image_path))[0]
                        # Salvar a imagem filtrada
                        output_path = os.path.join(output_folder, f'{file_name}_mask_{j}.jpg')
                        cv2.imwrite(output_path, mask)

        if not masks_available:
            print(f"Sem resultados para {image_path}")

image_files_list = list_image_files(image_path)

# Aplicar segmentação a cada imagem
for file_name, file_path in image_files_list:
    print(f"Aplicando YOLO a {file_name}")
    predict(file_path, output_folder)

print("Yolo aplicados com sucesso!")