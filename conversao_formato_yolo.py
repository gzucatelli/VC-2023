# -*- coding: utf-8 -*-
"""conversao-formato-yolo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jTnuxQJwUY20czvbjKFd7jpQqmnaDn5F
"""

from google.colab import drive

drive.mount('/content/gdrive')

!ls '/content/gdrive/My Drive/TP-VC-2023/Dados_Treinados/labels/val'

import os
import cv2

input_dir = '/content/gdrive/My Drive/TP-VC-2023/VALIDAÇÃO -task_tp_vc_validacao-2023_12_03_20_52_52-segmentation mask 1.1/SegmentationClass'
output_dir = '/content/gdrive/My Drive/TP-VC-2023/Dados_Treinados/labels/val'

for j in os.listdir(input_dir):
    image_path = os.path.join(input_dir, j)
    # load the binary mask and get its contours
    mask = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    _, mask = cv2.threshold(mask, 1, 255, cv2.THRESH_BINARY)

    # Check if the image is grayscale
    if len(mask.shape) == 2:
        H, W = mask.shape
    else:
        # If it's a color image, you might want to extract one channel or handle it differently
        H, W, _ = mask.shape
        mask = cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY)  # Convert to grayscale if needed

    contours, hierarchy = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # convert the contours to polygons
    polygons = []
    for cnt in contours:
        if cv2.contourArea(cnt) > 200:
            polygon = []
            for point in cnt:
                x, y = point[0]
                polygon.append(x / W)
                polygon.append(y / H)
            polygons.append(polygon)

    # print the polygons
    with open('{}.txt'.format(os.path.join(output_dir, j)[:-4]), 'w') as f:
        for polygon in polygons:
            for p_, p in enumerate(polygon):
                if p_ == len(polygon) - 1:
                    f.write('{}\n'.format(p))
                elif p_ == 0:
                    f.write('0 {} '.format(p))
                else:
                    f.write('{} '.format(p))